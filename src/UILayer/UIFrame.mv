
mkCSSPixelValueProperty = ^(name, eventPropertyName, defaultValue:0) {
  return {
    enumerable: true,
    get: ^{
      if (v = @layer.element.style.getPropertyCSSValue name) {
        if (v.primitiveType == CSSPrimitiveValue.CSS_PX)
          return v.getFloatValue CSSPrimitiveValue.CSS_PX
        # else probably "auto" thus default value
      }
      return defaultValue
    },
    set: ^(value) {
      if (value == undefined || value == null) {
        @layer.element.style.removeProperty name
        return
      }

      if (typeof value == 'number')
        @layer.element.style.setProperty name, value+'px', null
      else
        @layer.element.style.setProperty name, Text(value), null

      @layer.emit 'UILayerFrameDidChange', {changedPropertyName:eventPropertyName}
    }
  }
}

# -----------------------


// frame is an object with {x, y, width, height}
module.exports = exports = UIFrame = class {
  constructor: ^(layer) {
    Object.defineProperty this, 'layer', {value:layer}
  },

  toString: ^{
    '{x:'+@x+', y:'+@y+', width:'+@width+', height:'+@height+'}'
  }
}

Object.defineProperties UIFrame.prototype, {
  width: mkCSSPixelValueProperty 'width', 'width', -1,
  height: mkCSSPixelValueProperty 'height', 'height', -1,
  
  x: { enumerable: true,
    get: ^{ @layer.matrix.m41 },
    set: ^{
      matrix = @layer.matrix
      matrix.m41 = arguments[0]
      @layer.matrix = matrix
    }
  },
  
  y: { enumerable: true,
    get: ^{ @layer.matrix.m42 },
    set: ^{
      matrix = @layer.matrix
      matrix.m42 = arguments[0]
      @layer.matrix = matrix
    }
  },
  
  z: { enumerable: true,
    get: ^{ @layer.matrix.m43 },
    set: ^{
      matrix = @layer.matrix
      matrix.m43 = arguments[0]
      @layer.matrix = matrix
    }
  },
}

