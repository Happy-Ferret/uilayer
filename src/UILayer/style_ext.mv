

/*mkCSSNumberValueProperty = ^(name, defaultValue) {
  return {
    enumerable: true,
    get: ^{
      if (v = @style.getPropertyCSSValue '-webkit-transform-origin-x') {
        if (v.primitiveType == CSSPrimitiveValue.CSS_PX)
          return v.getFloatValue CSSPrimitiveValue.CSS_PX
        else
          return v.cssText
      }
      defaultValue
    },
    set: ^(value) {
      if (value == undefined || value == null) value = defaultValue
      if (typeof value != 'number') value = Text value
      else value = value + 'px'
      @style.setProperty name, value, null
    }
  }
}


UICSSNumberValueProxy = ^(style, properties) {
  properties.forEach ^(name, info) {
    properties[name] = mkCSSNumberValueProperty.apply null, info
  }
  o = Object.create UICSSNumberValueProxy.prototype, properties
  Object.defineProperty o, 'style', {value:style, enumerable:false}
  o
}
UICSSNumberValueProxy.prototype = {}*/


# Transform origin (mutable proxy)
/*Object.defineProperty CSSStyleDeclaration.prototype, 'transformOrigin', {
  enumerable: true,
  configurable: false,
  get: ^{
    UICSSNumberValueProxy this, {
      x: ['-webkit-transform-origin-x', 0],
      y: ['-webkit-transform-origin-y', 0] }
  }
}*/


# Style declaration extensions for working with 3D matrix
CSSStyleDeclaration.prototype.setMatrix3dTransform = ^(values) {
  /* values = [
      m00, m01, m02, m03,
      m10, m11, m12, m13,
      m20, m21, m22, m23,
      m30, m31, m31, m33 ] */
  if (!(matrix3d = @getMatrix3dTransform()))
    identityMatrix = [ 1,0,0,0,
                       0,1,0,0,
                       0,0,1,0,
                       0,0,0,1 ]
  // Convert a WebKitCSSTransformValue
  if (values && values instanceof WebKitCSSTransformValue) {
    if (values.operationType != WebKitCSSTransformValue.CSS_MATRIX3D)
      throw TypeError 'First argument is not a valid 3D matrix'
    v2 = []
    for (i=0; i < values.length; ++i)
      v2[i] = values[i].getFloatValue CSSPrimitiveValue.CSS_NUMBER
    values = v2
  }
  v = []
  for (i=0; i < matrix3d.length; ++i) {
    if ((value = values[i]) == undefined) {
      if (matrix3d)
        v[i] = matrix3d[i].getFloatValue CSSPrimitiveValue.CSS_NUMBER
      else
        v[i] = identityMatrix[i]
    } else {
      v[i] = value
    }
  }
  @_matrix3d = null
  @setProperty '-webkit-transform', 'matrix3d('+v.join(',')+')'
}


CSSStyleDeclaration.prototype.getMatrix3dTransform = ^{
  if (@_matrix3d) return @_matrix3d
  pv = @getPropertyCSSValue '-webkit-transform'
  if (pv) for (i=0; i < pv.length; ++i) {
    v = pv[i]
    if (v && v instanceof WebKitCSSTransformValue
        && v.operationType == WebKitCSSTransformValue.CSS_MATRIX3D) {
      @_matrix3d = v
      return v
    }
  }
}
